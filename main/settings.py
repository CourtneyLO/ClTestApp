"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import sentry_sdk
from dotenv import load_dotenv
import boto3

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG') == 'True'

URL_HOSTS = os.getenv('URL_HOSTS')

def get_parameter(name, with_decryption=True):
    try:
        client = boto3.client('ssm', region_name=os.getenv("AWS_REGION", "eu-west-2"))
        parameter = client.get_parameter(Name=name, WithDecryption=with_decryption)
        return parameter['Parameter']['Value']
    except Exception as e:
        return None

project_name = os.getenv('PROJECT_NAME')
allowed_load_balancer_url = get_parameter(f'/{project_name}/ec2/env/ALLOWED_LOAD_BALANCER_URL') or os.getenv('ALLOWED_LOAD_BALANCER_URL')
allowed_custom_domain_url = get_parameter(f'/{project_name}/ec2/env/ALLOWED_CUSTOM_DOMAIN_URL') or os.getenv('ALLOWED_CUSTOM_DOMAIN_URL')
csrf_trusted_origins = get_parameter(f'/{project_name}/ec2/env/CSRF_TRUSTED_ORIGINS') or os.getenv('CSRF_TRUSTED_ORIGINS')

ALLOWED_HOSTS = []

if os.getenv('ALLOWED_IP_ADDRESS'):
    ALLOWED_HOSTS.append(os.getenv('ALLOWED_IP_ADDRESS'))

if allowed_load_balancer_url:
    ALLOWED_HOSTS.append(allowed_load_balancer_url)

if allowed_custom_domain_url:
    ALLOWED_HOSTS.append(allowed_custom_domain_url)

if csrf_trusted_origins:
    CSRF_TRUSTED_ORIGINS = csrf_trusted_origins.split(',')

print("ALLOWED_HOSTS", ALLOWED_HOSTS)
print("CSRF_TRUSTED_ORIGINS", CSRF_TRUSTED_ORIGINS)

# CORS
# https://github.com/adamchainz/django-cors-headers
if os.getenv('FRONT_END_URLS'):
    CORS_ALLOWED_ORIGINS = os.getenv('FRONT_END_URLS').split(', ')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'graphene_django',

    'import_export',

    'corsheaders',

    'users',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

GRAPHENE = {
    'SCHEMA': 'main.schema.schema',
    'ATOMIC_MUTATIONS': True,
}


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT') and int(os.getenv('DATABASE_PORT'))
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_S3_BUCKET_NAME')
AWS_QUERYSTRING_AUTH = False
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

if os.getenv('ENVIRONMENT') == 'local':
    STATIC_URL = 'static/'
else:
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
    print('================')
    print("STATIC_URL", STATIC_URL)
    print('================')

STATIC_ROOT = os.path.join(BASE_DIR, "static")
print('================')
print("STATIC_ROOT", STATIC_ROOT)
print('================')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if os.getenv('ENVIRONMENT') in ['production']:
    sentry_sdk.init(
        dsn="https://examplePublicKey@o0.ingest.sentry.io/0",
        traces_sample_rate=1.0,
        profiles_sample_rate=1.0, # We recommend adjusting this value in production.
        environment=os.getenv('ENVIRONMENT')
    )
